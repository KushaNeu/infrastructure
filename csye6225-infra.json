{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Networks and cloud computing - infrastructure as a code -assignment 5",
  "Parameters": {
    "Name": {
      "Type": "String",
      "Description": "Default Name for the infrastructure"
    },
    "VPCCIDR": {
      "Type": "String",
      "Description": "IP Address range for the VPC",
      "Default": "10.1.0.0/16"
    },
    "Subnet1CIDR": {
      "Type": "String",
      "Description": "IP Address range for the Subnet 1",
      "Default": "10.1.1.0/24"
    },
    "Subnet2CIDR": {
      "Type": "String",
      "Description": "IP Address range for the Subnet 2",
      "Default": "10.1.2.0/24"
    },
    "Subnet3CIDR": {
      "Type": "String",
      "Description": "IP Address range for the Subnet 3",
      "Default": "10.1.3.0/24"
    },
    "DBSubnet1CIDR": {
      "Type": "String",
      "Description": "IP Address range for the Subnet 1",
      "Default": "10.1.4.0/24"
    },
    "DBSubnet2CIDR": {
      "Type": "String",
      "Description": "IP Address range for the Subnet 2",
      "Default": "10.1.5.0/24"
    },
    "DBSubnet3CIDR": { 
      "Type": "String",
      "Description": "IP Address range for the Subnet 3",
      "Default": "10.1.6.0/24"
    },
    "AmiId": {
      "Type": "String",
      "Description": "Ami instance id"
    },
    "ApplicationInstanceType": {
      "Type": "String",
      "Description": "ami type",
      "Default": "t2.micro"
    },
    "S3BucketRandomString": {
      "Type": "String",
      "Description": "Random string passed as param for s3 bucket name",
      "Default": "asdfasdfasdf"
    },
    "MysqlUserName": {
      "Type": "String",
      "Description": "user name for mysql",
      "Default": "root"
    },
    "MysqlPassword": {
      "Type": "String",
      "Description": "password for mysql",
      "Default": "adminadmin"
    },
    "User": {
      "Type": "String",
      "Description": "password for mysql",
      "Default": "dev"
    },
    "DomainName": {
      "Description": "Public Domain Name",
      "Type": "String"
    },
    "SEStopicArn": {
      "Description": "mail domain",
      "Type": "String",
      "Default": "prod.dheerajreddy.me"
    },
    "AccountId": {
      "Description": "organization account id",
      "Type": "String"
    },
    "dynamoDBTable": {
      "Description": "dynamoDBTableName",
      "Type": "String",
      "Default": "userVerification"
    },
    "HTTPSCertificateSSL": {
      "Description": "organization account id",
      "Type": "String",
      "Default": "5984b8c8-4ccb-4dd3-b5aa-c9d27b5fe644"
    }
  },
  "Mappings": {
    "UserS3Map": {
      "dev": {
        "name": "dev"
      },
      "demo": {
        "name": "prod"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet1CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} Subnet 1 in AvailabilityZone 0"
            }
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet2CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} Subnet 2 in AvailabilityZone 1"
            }
          }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "Subnet3CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} Subnet 3 in AvailabilityZone 2"
            }
          }
        ]
      }
    },
    "DBSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "DBSubnet1CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} DB Subnet 1 in AvailabilityZone 0"
            }
          }
        ]
      }
    },
    "DBSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "DBSubnet2CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} DB Subnet 2 in AvailabilityZone 1"
            }
          }
        ]
      }
    },
    "DBSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "DBSubnet3CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} DB Subnet 3 in AvailabilityZone 2"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ]
      }
    },
    "VPCInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${Name} Public Routing Table"
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCInternetGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet1"
        }
      }
    },
    "Subnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet2"
        }
      }
    },
    "Subnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet3"
        }
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for db server",
        "SubnetIds": [
          {
            "Ref": "DBSubnet1"
          },
          {
            "Ref": "DBSubnet2"
          },
          {
            "Ref": "DBSubnet3"
          }
        ]
      }
    },
    "ApplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enabling ssh and port access",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enabling only port access",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": {
              "Ref": "ApplicationSecurityGroup"
            }
          }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "loadbalance port openings",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Route53LBMap": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Ref": "DomainName"
        },
        "Type": "A",
        "HostedZoneName": {
          "Ref": "DomainName"
        },
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": "PublicLoadBalancer.DNSName"
          },
          "HostedZoneId": {
            "Fn::GetAtt": "PublicLoadBalancer.CanonicalHostedZoneID"
          }
        }
      }
    },
    "PublicLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType": "ipv4",
        "Name": {
          "Fn::Sub": "${AWS::StackName}-lb"
        },
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": "LoadBalancerSecurityGroup.GroupId"
          }
        ],
        "Subnets": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          },
          {
            "Ref": "Subnet3"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "webapp entry point"
          }
        ],
        "Type": "application"
      },
      "DependsOn": "PublicRoute"
    },
    "PublicLoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-lb-tg"
        },
        "TargetType": "instance",
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "HealthCheckIntervalSeconds": 90,
        "HealthCheckPath": "/v1/healthz",
        "HealthCheckPort": "80",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 60,
        "HealthyThresholdCount": 2,
        "IpAddressType": "ipv4",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-lb-tg"
            }
          }
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": 20
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicLoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "PublicLoadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "PublicLoadBalancer"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "Certificates" : [ {
          "CertificateArn" : "arn:aws:acm:us-east-1:101417083507:certificate/5984b8c8-4ccb-4dd3-b5aa-c9d27b5fe644"
        }]
      }
    },
    "PublicLBListenerCertificate": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerCertificate",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:acm:us-east-1:",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":certificate/",
                  {
                    "Ref":"HTTPSCertificateSSL"
                  }
                ]
              ]
            }
          }
        ],
        "ListenerArn": {
          "Ref": "PublicLoadBalancerListener"
        }
      }
    },
    "APPServerEncryptionKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "webapp-key-2",
          "Statement": [
            {
              "Sid": "App Server encryption key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow service-linked role use of the KMS",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
                      ]
                    ]
                  }
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow attachment of persistent resources",
              "Effect": "Allow",
              "Principal": {
                "AWS": [{
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
                    ]
                  ]
                }
                ]
              },
              "Action": [
                "kms:CreateGrant"
              ],
              "Resource": "*",
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": true
                }
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "webapp_encryption_key"
          }
        ]
      }
    },
    "AutoScalingGroupTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "DependsOn": [
        "PublicRoute",
        "RDSInstance"
      ],
      "Properties": {
        "LaunchTemplateName": {
          "Fn::Sub": "${AWS::StackName}-lt"
        },
        "LaunchTemplateData": {
          "InstanceType": {
            "Ref": "ApplicationInstanceType"
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "IAMInstanceProfile"
            }
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": true,
              "DeleteOnTermination": true,
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Ref": "ApplicationSecurityGroup"
                }
              ]
            }
          ],
          "KeyName": "dheeraj-mac-laptop",
          "ImageId": {
            "Ref": "AmiId"
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeType": "gp2",
                "DeleteOnTermination": true,
                "VolumeSize": "20",
                "Encrypted":true,
                "KmsKeyId":{"Ref":"APPServerEncryptionKey"}
              }
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash",
                  "cd",
                  "rm  /tmp/mysql.config",
                  "touch  /tmp/mysql.config",
                  "cat >> /tmp/mysql.config << 'EOF'",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "{\"bucketName\":\"",
                        {
                          "Ref": "S3BucketRandomString"
                        },
                        ".",
                        {
                          "Fn::FindInMap": [
                            "UserS3Map",
                            {
                              "Ref": "User"
                            },
                            "name"
                          ]
                        },
                        ".dheerajreddy.me\","
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "\"domain\":\"",
                        {
                          "Fn::FindInMap": [
                            "UserS3Map",
                            {
                              "Ref": "User"
                            },
                            "name"
                          ]
                        },
                        ".dheerajreddy.me\","
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "\"fromEmail\":\"no-reply@",
                        {
                          "Fn::FindInMap": [
                            "UserS3Map",
                            {
                              "Ref": "User"
                            },
                            "name"
                          ]
                        },
                        ".dheerajreddy.me\","
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "\"dbHost\":\"",
                        {
                          "Fn::GetAtt": "RDSInstance.Endpoint.Address"
                        },
                        "\","
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "\"dynamoDBTable\":\"",
                        {
                          "Ref": "dynamoDBTable"
                        },
                        "\","
                      ]
                    ]
                  },
                  {
                    "Fn::Sub": "\"dbUser\":\"${MysqlUserName}\","
                  },
                  {
                    "Fn::Sub": "\"dbPass\":\"${MysqlPassword}\","
                  },
                  {
                    "Fn::Sub": "\"topicARN\":\"${WebAPPSNS}\"}"
                  },
                  "EOF",
                  "chmod 777 /tmp/mysql.config",
                  "sudo systemctl restart application_boot.service"
                ]
              ]
            }
          }
        }
      }
    },
    "AppServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": {
          "Fn::Sub": "${AWS::StackName}-asg"
        },
        "Cooldown": 60,
        "DesiredCapacity": 1,
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": "EC2",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "AutoScalingGroupTemplate"
          },
          "Version": {
            "Fn::GetAtt": "AutoScalingGroupTemplate.LatestVersionNumber"
          }
        },
        "MaxSize": 5,
        "MinSize": 1,
        "NewInstancesProtectedFromScaleIn": false,
        "Tags": [
          {
            "Key": "Application",
            "Value": "WebApp",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-appScale"
            },
            "PropagateAtLaunch": true
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "PublicLoadBalancerTargetGroup"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          },
          {
            "Ref": "Subnet3"
          }
        ]
      }
    },
    "ASGCPUPolicyScaleUp": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AppServerAutoScalingGroup"
        },
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": 60,
        "ScalingAdjustment": 1
      }
    },
    "ASGCPUPolicyScaleDown": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AppServerAutoScalingGroup"
        },
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": 60,
        "ScalingAdjustment": -1
      }
    },
    "CloudWatchAlarmScaleUp": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ASGCPUPolicyScaleUp"
          }
        ],
        "AlarmDescription": "Alarm for scaling up",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AppServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": 2,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 15
      }
    },
    "CloudWatchAlarmScaleDown": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ASGCPUPolicyScaleDown"
          }
        ],
        "AlarmDescription": "Alarm for scaling down",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AppServerAutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": 2,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 10
      }
    },
    "IAMRoleForAPPServer": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "IAM role to access s3 from app server for storage",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketRandomString"
                          },
                          ".",
                          {
                            "Fn::FindInMap": [
                              "UserS3Map",
                              {
                                "Ref": "User"
                              },
                              "name"
                            ]
                          },
                          ".dheerajreddy.me"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3BucketRandomString"
                          },
                          ".",
                          {
                            "Fn::FindInMap": [
                              "UserS3Map",
                              {
                                "Ref": "User"
                              },
                              "name"
                            ]
                          },
                          ".dheerajreddy.me/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "CodeDeployS3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Fn::FindInMap": [
                              "UserS3Map",
                              {
                                "Ref": "User"
                              },
                              "name"
                            ]
                          },
                          ".codedeploy"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Fn::FindInMap": [
                              "UserS3Map",
                              {
                                "Ref": "User"
                              },
                              "name"
                            ]
                          },
                          ".codedeploy/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "snsPublishAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    {
                      "Ref": "WebAPPSNS"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "S3IamRole"
          }
        ]
      }
    },
    "IAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "IAMRoleForAPPServer"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "S3BucketRandomString"
              },
              ".",
              {
                "Fn::FindInMap": [
                  "UserS3Map",
                  {
                    "Ref": "User"
                  },
                  "name"
                ]
              },
              ".dheerajreddy.me"
            ]
          ]
        },
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "StorageRules",
              "Prefix": "standardIA",
              "Status": "Enabled",
              "Transitions": [
                {
                  "TransitionInDays": 30,
                  "StorageClass": "STANDARD_IA"
                }
              ]
            }
          ]
        }
      }
    },
    "RDSParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "MySQL Parameter Group",
        "Family": "mysql8.0",
        "Parameters": {
          "sql_mode": "IGNORE_SPACE"
        }
      }
    },
    "RDSEncryptionKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "webapp-key-1",
          "Statement": [
            {
              "Sid": "Key for DB encryption",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDS_encryption_key"
          }
        ]
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceIdentifier": "webserver",
        "DBName": "webserver",
        "DBInstanceClass": "db.t3.micro",
        "DeleteAutomatedBackups": true,
        "Engine": "MySQL",
        "EngineVersion": "8.0.16",
        "AllocatedStorage": "5",
        "StorageEncrypted": true,
        "KmsKeyId": {
          "Ref": "RDSEncryptionKey"
        },
        "MasterUsername": {
          "Ref": "MysqlUserName"
        },
        "MasterUserPassword": {
          "Ref": "MysqlPassword"
        },
        "DBParameterGroupName": {
          "Ref": "RDSParameterGroup"
        },
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": "DBSecurityGroup.GroupId"
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "MultiAZ": false,
        "PubliclyAccessible": false
      },
      "DependsOn": [
        "DBSubnet1",
        "DBSubnet2",
        "DBSubnet3",
        "VPCInternetGateway"
      ]
    },
    "WebAPPSNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "My First WebApp SNS",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": "EmailLambda.Arn"
            },
            "Protocol": "lambda"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ],
        "TopicName": "WebAppSNS"
      },
      "DependsOn": [
        "EmailLambda"
      ]
    },
    "EmailLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "prod.emailverification.lambda"
          },
          "S3Key": "lambda.zip"
        },
        "Description": "Emails the TTL link to the user for account verification",
        "Environment": {
          "Variables": {
            "domainName": {
              "Ref": "SEStopicArn"
            }
          }
        },
        "FunctionName": "handler",
        "Handler": "index.handler",
        "PackageType": "Zip",
        "Role": {
          "Fn::GetAtt": "EmailLambdaFunctionRole.Arn"
        },
        "Runtime": "nodejs14.x",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ]
      },
      "DependsOn": "EmailLambdaFunctionRole"
    },
    "EmailLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": "handler",
        "Principal": "sns.amazonaws.com"
      },
      "DependsOn": [
        "EmailLambda"
      ]
    },
    "EmailLambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "iam role for email lambda function",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaSESemailVerifyPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:ses:us-east-1:${AccountId}:identity/${SEStopicArn}"
                  }
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "token",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "token",
            "KeyType": "RANGE"
          }
        ],
        "TableName": {
          "Ref": "dynamoDBTable"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "WebAppCodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "webapp",
        "ComputePlatform": "Server",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ]
      }
    },
    "WebappDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "WebAppCodeDeployApplication"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": "CodeDeployServiceRole.Arn"
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "webapp",
        "AutoScalingGroups": [
          {
            "Ref": "AppServerAutoScalingGroup"
          }
        ]
      },
      "DependsOn": [
        "WebAppCodeDeployApplication",
        "AppServerAutoScalingGroup",
        "CodeDeployServiceRole"
      ]
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "allow-autoscaling",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*",
                    "autoscaling:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CloudWatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "webapp-metrics",
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ]
      }
    },
    "CloudWatchLogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": "webapp-metrics",
        "LogStreamName": "webapp"
      },
      "DependsOn": [
        "CloudWatchLogGroup"
      ]
    },
    "GHS3Policy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "perms to copy deployment folder to s3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:ListBucket"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Fn::FindInMap": [
                          "UserS3Map",
                          {
                            "Ref": "User"
                          },
                          "name"
                        ]
                      },
                      ".codedeploy/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Fn::FindInMap": [
                          "UserS3Map",
                          {
                            "Ref": "User"
                          },
                          "name"
                        ]
                      },
                      ".codedeploy"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "ManagedPolicyName": "ghArtifactUpload",
        "Users": [
          "gh_demo_user"
        ]
      }
    },
    "GHS3PolicyForLambda": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "perms to copy deployment folder to s3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:ListBucket"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Fn::FindInMap": [
                          "UserS3Map",
                          {
                            "Ref": "User"
                          },
                          "name"
                        ]
                      },
                      ".emailverification.lambda/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Fn::FindInMap": [
                          "UserS3Map",
                          {
                            "Ref": "User"
                          },
                          "name"
                        ]
                      },
                      ".emailverification.lambda"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "ManagedPolicyName": "gh_lambda_s3",
        "Users": [
          "gh_demo_user"
        ]
      }
    },
    "GHCodeDeployPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "perms to call code deploy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codedeploy:us-east-1:${AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetApplicationRevision",
                "codedeploy:RegisterApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codedeploy:us-east-1:${AccountId}:application:webapp"
                }
              ]
            }
          ]
        },
        "ManagedPolicyName": "githubActionsCodeDeployAPI",
        "Users": [
          "gh_demo_user"
        ]
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "newly created VPC details",
      "Value": {
        "Ref": "VPC"
      }
    }
  }
}
